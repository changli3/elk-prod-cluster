Parameters:

  Ami:
    Type: String
    Description: Latest Ubuntu 16.04 Ami in your AWS Region
    Default: ami-6e1a0117

  AsgMaxSize:
    Type: Number
    Description: The maximum size of ASG
    Default: 8

  AsgMinSize:
    Type: Number
    Description: The minimum size of ASG
    Default: 2

  EmailAlerts:
    Type: String
    Default: email_for_alerts@domain.com

  InstanceType:
    Type: String
    Default: t2.medium

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to instances

  SubnetID1:
    Type: AWS::EC2::Subnet::Id

  SubnetID2:
    Type: AWS::EC2::Subnet::Id

  VpcId:
    Type: AWS::EC2::VPC::Id

  AllowIPs:
    Type: String
    Default: 172.31.0.0/16

  kbAsgMaxSize:
    Type: Number
    Description: The maximum size of ASG
    Default: 8

  kbAsgMinSize:
    Type: Number
    Description: The minimum size of ASG
    Default: 1	
	
Resources:

  Sg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Sub: ${AWS::StackName}-Sg
      VpcId: !Ref VpcId

  SgAllTrafficports:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'Sg'
      IpProtocol: tcp
      FromPort: '0'
      ToPort: '65535'
      CidrIp: !Ref AllowIPs

  AlertsTopic: 
    Type: AWS::SNS::Topic
    Properties: 
      Subscription: 
        - Endpoint: !Ref EmailAlerts
          Protocol: email
      TopicName: 
        Fn::Sub: ${AWS::StackName}-AlertsTopic

  HostRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - autoscaling.amazonaws.com
            - s3.amazonaws.com
            - cloudformation.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-DumpBackupS3
        PolicyDocument:
          Statement:
          - Action: s3:*
            Resource: !GetAtt ElasticSearchBackup.Arn
            Effect: Allow
          - Action: s3:*
            Resource: !Sub
              - ${Bucket}/*
              - { Bucket: !GetAtt ElasticSearchBackup.Arn }
            Effect: Allow
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-GetCloudformation
        PolicyDocument:
          Statement:
          - Action:
            - cloudformation:DescribeStacks
            - cloudformation:DescribeStackEvents
            - cloudformation:DescribeStackResource
            - cloudformation:DescribeStackResources
            - cloudformation:GetTemplate
            - cloudformation:List*
            Resource: "*"
            Effect: Allow
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-DescribeInstances
        PolicyDocument:
          Statement:
          - Action:
            - ec2:DescribeInstances
            Resource: "*"
            Effect: Allow

  HostProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - Ref: HostRole

  ElasticSearchBackup:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  Asg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - !Ref SubnetID1
      - !Ref SubnetID2
      NotificationConfiguration:
        TopicARN:
          Ref: AlertsTopic
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH
        - autoscaling:EC2_INSTANCE_TERMINATE
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      HealthCheckGracePeriod: '600'
      HealthCheckType: EC2
      LoadBalancerNames: 
      LaunchConfigurationName:
        Ref: Lc
      MinSize:
        Ref: AsgMinSize
      MaxSize:
        Ref: AsgMaxSize
      DesiredCapacity:
        Ref: AsgMinSize
      LoadBalancerNames:
      - Ref: ElbElasticSearch
      Tags:
      - Key: Name
        Value: ElasticSearchCluster
        PropagateAtLaunch: true
      - Key: Creator
        Value:
          Ref: KeyName
        PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService:
          Ref: AsgMinSize
        PauseTime: PT5M

  Lc:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: Ami
      BlockDeviceMappings:
      - DeviceName: /dev/xvdcy
        Ebs:
          VolumeSize: 100
          VolumeType: gp2
      InstanceType:
        Ref: InstanceType
      IamInstanceProfile:
        Ref: HostProfile
      KeyName:
        Ref: KeyName
      SecurityGroups:
      - Ref: Sg
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #cloud-config
            package_upgrade: true
            packages:
            - ntp
            - unzip
            - java-1.8.0-openjdk
            - wget
            write_files:
            - path: /etc/cron.d/elasticsearch-backup
              content: |
                0 1 */3 0 0 root aws s3 sync /mnt/elasticsearch/ s3://${ElasticSearchBackup}/$(hostname)/elasticsearch/$(date)/
              permissions: '0600'
            runcmd:
            - curl -s -L https://raw.githubusercontent.com/changli3/elk-prod-cluster/master/install-elasticsearch.sh | bash  -s ${AWS::StackName} ${Sg}

  CpuUtilization:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName:
        Ref: Asg
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        TargetValue: 70
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization

  NetworkInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: AlertsTopic
      MetricName: NetworkIn
      ComparisonOperator: GreaterThanThreshold
      AlarmDescription: High network input traffic during 15 minutes
      Statistic: Average
      Period: '300'
      Dimensions:
      - Value:
          Ref: Asg
        Name: AutoScalingGroupName
      EvaluationPeriods: '3'
      InsufficientDataActions:
      - Ref: AlertsTopic
      Namespace: AWS/EC2
      Threshold: '2400000000'

  RAMAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: AlertsTopic
      MetricName: MemoryUtilization
      ComparisonOperator: GreaterThanThreshold
      AlarmDescription: Memory utilization > 85% during 15 minutes
      Statistic: Average
      Period: '300'
      Dimensions:
      - Value:
          Ref: Asg
        Name: AutoScalingGroupName
      EvaluationPeriods: '3'
      InsufficientDataActions:
      - Ref: AlertsTopic
      Namespace: System/Linux
      Threshold: '85'

  NetworkOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: AlertsTopic
      MetricName: NetworkOut
      ComparisonOperator: GreaterThanThreshold
      AlarmDescription: High network output traffic during 15 minutes
      Statistic: Average
      Period: '300'
      Dimensions:
      - Value:
          Ref: Asg
        Name: AutoScalingGroupName
      EvaluationPeriods: '3'
      InsufficientDataActions:
      - Ref: AlertsTopic
      Namespace: AWS/EC2
      Threshold: '2400000000'

  IOWaitAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: AlertsTopic
      MetricName: IOWait
      ComparisonOperator: GreaterThanThreshold
      AlarmDescription: Alarm if IOWait > 85% for 15 minutes
      Statistic: Average
      Period: '300'
      Dimensions:
      - Value:
          Ref: AWS::StackName
        Name: StackName
      EvaluationPeriods: '3'
      InsufficientDataActions:
      - Ref: AlertsTopic
      Namespace: AWS/EC2
      Threshold: '85'

  StatusAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: AlertsTopic
      MetricName: StatusCheckFailed
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmDescription: Alert if asg has degraded instances
      Statistic: Maximum
      Period: '60'
      Dimensions:
      - Value:
          Ref: Asg
        Name: AutoScalingGroupName
      EvaluationPeriods: '2'
      InsufficientDataActions:
      - Ref: AlertsTopic
      Unit: Count
      Namespace: AWS/EC2
      Threshold: '1'

  ElbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Elb Allowed Ports
      VpcId: !Ref VpcId

  ElbSecurityGroupElbAllTrafficports:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ElbSecurityGroup'
      IpProtocol: tcp
      FromPort: '0'
      ToPort: '65535'
      CidrIp: !Ref AllowIPs

  ElbElasticSearch:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      LoadBalancerName:
        Fn::Sub: ${AWS::StackName}
      Scheme: internal
      Subnets: 
      - !Ref SubnetID1
      - !Ref SubnetID2
      SecurityGroups: [ !Ref ElbSecurityGroup ]
      HealthCheck:
        Target:
          Fn::Join:
          - ''
          - - 'HTTP:'
            - '9200'
            - "/_cluster/health"
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '9200'
        Protocol: TCP
      - LoadBalancerPort: '9200'
        InstancePort: '9200'
        Protocol: TCP

  kbAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - !Ref SubnetID1
      - !Ref SubnetID2
      NotificationConfiguration:
        TopicARN:
          Ref: AlertsTopic
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH
        - autoscaling:EC2_INSTANCE_TERMINATE
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      HealthCheckGracePeriod: '600'
      HealthCheckType: EC2
      LoadBalancerNames: 
      LaunchConfigurationName:
        Ref: kbLc
      MinSize:
        Ref: kbAsgMinSize
      MaxSize:
        Ref: kbAsgMaxSize
      DesiredCapacity:
        Ref: kbAsgMinSize
      LoadBalancerNames:
      - Ref: ElbKibana
      Tags:
      - Key: Name
        Value: KibanaCluster
        PropagateAtLaunch: true
      - Key: Creator
        Value:
          Ref: KeyName
        PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService:
          Ref: kbAsgMinSize
        PauseTime: PT5M
  kbLc:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: Ami
      BlockDeviceMappings:
      - DeviceName: /dev/xvdcy
        Ebs:
          VolumeSize: 100
          VolumeType: gp2
      InstanceType:
        Ref: InstanceType
      IamInstanceProfile:
        Ref: HostProfile
      KeyName:
        Ref: KeyName
      SecurityGroups:
      - Ref: Sg
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #cloud-config
            package_upgrade: true
            packages:
            - ntp
            - zip
            - unzip
            - wget
            write_files:
            - path: /etc/cron.d/kibana-backup
              content: |
                0 1 */3 0 0 root aws s3 sync /mnt/kibana/ s3://${ElasticSearchBackup}/$(host)/kibana/$(date)/
              permissions: '0600'
            runcmd:
            - curl -s -L https://raw.githubusercontent.com/changli3/elk-prod-cluster/master/install-kibana.sh | bash  -s ${AWS::StackName} ${Sg}

  kbCpuUtilization:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName:
        Ref: kbAsg
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        TargetValue: 70
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization

  kbNetworkInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: AlertsTopic
      MetricName: NetworkIn
      ComparisonOperator: GreaterThanThreshold
      AlarmDescription: High network input traffic during 15 minutes
      Statistic: Average
      Period: '300'
      Dimensions:
      - Value:
          Ref: kbAsg
        Name: AutoScalingGroupName
      EvaluationPeriods: '3'
      InsufficientDataActions:
      - Ref: AlertsTopic
      Namespace: AWS/EC2
      Threshold: '2400000000'

  kbRAMAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: AlertsTopic
      MetricName: MemoryUtilization
      ComparisonOperator: GreaterThanThreshold
      AlarmDescription: Memory utilization > 85% during 15 minutes
      Statistic: Average
      Period: '300'
      Dimensions:
      - Value:
          Ref: kbAsg
        Name: AutoScalingGroupName
      EvaluationPeriods: '3'
      InsufficientDataActions:
      - Ref: AlertsTopic
      Namespace: System/Linux
      Threshold: '85'

  kbNetworkOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: AlertsTopic
      MetricName: NetworkOut
      ComparisonOperator: GreaterThanThreshold
      AlarmDescription: High network output traffic during 15 minutes
      Statistic: Average
      Period: '300'
      Dimensions:
      - Value:
          Ref: kbAsg
        Name: AutoScalingGroupName
      EvaluationPeriods: '3'
      InsufficientDataActions:
      - Ref: AlertsTopic
      Namespace: AWS/EC2
      Threshold: '2400000000'

  kbStatusAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - Ref: AlertsTopic
      MetricName: StatusCheckFailed
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmDescription: Alert if asg has degraded instances
      Statistic: Maximum
      Period: '60'
      Dimensions:
      - Value:
          Ref: kbAsg
        Name: AutoScalingGroupName
      EvaluationPeriods: '2'
      InsufficientDataActions:
      - Ref: AlertsTopic
      Unit: Count
      Namespace: AWS/EC2
      Threshold: '1'

  ElbKibana:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      LoadBalancerName:
        Fn::Sub: ${AWS::StackName}
      Scheme: internal
      Subnets: 
      - !Ref SubnetID1
      - !Ref SubnetID2
      SecurityGroups: [ !Ref ElbSecurityGroup ]
      HealthCheck:
        Target:
          Fn::Join:
          - ''
          - - 'HTTP:'
            - '5601'
            - "/app/kibana"
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '5601'
        Protocol: TCP
      - LoadBalancerPort: '5601'
        InstancePort: '5601'
        Protocol: TCP

Outputs:
  Asg:
    Value: !Ref Asg

  ElasticSearchURL:
    Description: The URL to check the ElasticSearch Cluster health
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - ElbElasticSearch
          - DNSName
        - /_cluster/health

  KibanaURL:
    Description: The URL to view the kibana
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - ElbKibana
          - DNSName
        - /app/kibana
		
  SecurityGroup:
    Description: Auto-Discovery SecurityGroup for ElasticSearch
    Value: !Ref Sg